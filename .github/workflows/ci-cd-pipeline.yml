name: CI/CD Pipeline with Auto Merge

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "*/20 * * * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: stable  # Specify Flutter version (e.g., stable, 3.0.0, etc.)

      - name: Pull Changes
        run: git pull origin main

      - name: Run Build and Install Dependencies
        run: |
          flutter pub get  # Install Flutter dependencies
          flutter analyze  # Analyze the project for errors

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: stable

      - name: Run Tests
        run: flutter test

  merge:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Merge Latest Changes
        run: |
          git checkout main
          git pull origin main
          git merge ${{ github.event.head_commit.id }} --no-commit --no-ff
          git commit -m "Automated merge"

  deploy:
    needs: merge
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Deploy to Staging/Production
        if: success()
        run: echo "Deploying to staging/production..."

  parallel_tests:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [flutter]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: stable

      - name: Run Tests in Parallel
        run: flutter test

  notify:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Send Notifications
        run: echo "Sending notifications based on pipeline results..."

  version_tag:
    needs: merge
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Create Version Tag
        run: |
          git tag -a v$(date +%Y.%m.%d) -m "Release version"
          git push origin v$(date +%Y.%m.%d)
